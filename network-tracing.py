import subprocess
import sys
import time
from helper import get_package_name


def generate_self_signed_certificate():
    # BASH CMD: `openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 365`
    subprocess.run(
        ["openssl", "req", "-x509", "-newkey", "rsa:4096", "-keyout",
            "key.pem", "-out", "cert.pem", "-sha256", "-days", "365"],
        check=True
    )


def hash_certificate():
    # BASH CMD: `openssl x509 -inform PEM -subject_hash_old -in cert.pem`
    result = subprocess.run(
        ["openssl", "x509", "-inform", "PEM",
            "-subject_hash_old", "-in", "cert.pem"],
        capture_output=True,
        text=True,
        check=True
    )
    certificate_hash = result.stdout.strip()
    return certificate_hash


def write_pem_file(certificate_hash):
    #  BASH CMD: `cat cert.pem > <certificate_hash>.0`
    with open(f"{certificate_hash}.0", "w") as pem_file:
        subprocess.run(
            ["cat", "cert.pem"],
            stdout=pem_file,
            check=True
        )


def export_pem_info(certificate_hash):
    # BASH CMD: `openssl x509 -inform PEM -text -in cert.pem >> <certificate_hash>.0`
    with open(f"{certificate_hash}.0", "a") as pem_file:
        subprocess.run(
            ["openssl", "x509", "-inform", "PEM", "-text", "-in", "cert.pem"],
            stdout=pem_file,
            check=True
        )


def push_certificate_to_device(certificate_hash):
    # BASH CMD: `adb root`
    subprocess.run(["adb", "root"], check=True)

    # BASH CMD: `adb remount`
    subprocess.run(["adb", "remount"], check=True)

    # BASH CMD: `adb push <certificate_hash>.0 /system/etc/security/cacerts/`
    subprocess.run(["adb", "push", f"{certificate_hash}.0",
                   f"/system/etc/security/cacerts/{certificate_hash}.0"], check=True)
    
    # BASH CMD: `adb shell chmod 644 /system/etc/security/cacerts/<certificate_hash>.0`
    subprocess.run(["adb", "shell", "chmod", "644",
                   f"/system/etc/security/cacerts/{certificate_hash}.0"], check=True)


def setup_tcpdump_on_device():
    # BASH CMD: `adb push ./libs/tcpdump /system/xbin/tcpdump`
    subprocess.run(["adb", "push", "./libs/tcpdump",
                   "/system/xbin/tcpdump"], check=True)


def run_apk_with_monkey(package_name, apk, monkey_events=1000):
    # BASH CMD: `adb install <apk_path>``
    subprocess.run(["adb", "install", f"{apk}"], check=True)

    time.sleep(5)
    
    # BASH CMD: `adb shell monkey -p <package_name> --throttle 500 <monkey_events>`
    subprocess.run(["adb", "shell", "monkey", "-p", package_name,
                   "--throttle", "500", str(monkey_events)], check=True)


def start_tcpdump_on_device():
    #  BASH CMD: `adb shell tcpdump -vv -i any -s 0 -w /sdcard/dump.pcap`
    subprocess.run(["adb", "shell", "tcpdump", "-vv", "-i", "any",
                   "-s", "0", "-w", "/sdcard/dump.pcap"], check=True)


def pull_tcpdump_file_from_device(package_name):
    # BASH CMD: `adb pull /sdcard/dump.pcap <package_name>_dump.pcap`
    subprocess.run(["adb", "pull", "/sdcard/dump.pcap", f"./network-calls/{package_name}_dump.pcap"], check=True)


def main():
    if len(sys.argv) < 2:
        print("Usage: python network-tracing.py <apk_path>")
        sys.exit(1)

    apk_path = sys.argv[1]
    package_name = get_package_name(apk_path)

    # Generate a self-signed certificate
    generate_self_signed_certificate()
    certificate_hash = hash_certificate()

    # Write certificate to PEM file and push it to the device
    write_pem_file(certificate_hash)
    export_pem_info(certificate_hash)
    push_certificate_to_device(certificate_hash)

    # Setup tcpdump on the device
    setup_tcpdump_on_device()

    # Run the APK with monkey
    run_apk_with_monkey(package_name, apk_path)

    # Start tcpdump on the device
    start_tcpdump_on_device()

    # Pull the tcpdump file from the device
    pull_tcpdump_file_from_device(package_name)


if __name__ == "__main__":
    main()
