import subprocess
import time
import re
import sys
import helper
from helper import get_package_name

def install_application(apk_path):
    #BASH CMD: `adb install <apk_path>`
  
    subprocess.call(["adb", "install", apk_path])

#  need to check this function
def retrieve_zygote_pid(package_name): 
    # BASH CMD: `adb shell pidof zygote`
    zygote_pid = (
        subprocess.check_output(
            ["adb", "shell", "pidof", "zygote"]).decode().strip()
    )
    return int(zygote_pid)


# The -f option tells strace to follow forks, which allows capturing system calls of child processes as well.
# The -ttt option adds timestamps to each line of the strace output, which can be helpful for analyzing the timing of system calls.
def run_strace_on_zygote(output_file):
    zygote_pid = retrieve_zygote_pid()

    # BASH CMD: `adb shell strace -p <zygote_pid> -o <output_file> -f -ttt`
    subprocess.Popen(
        [
            "adb",
            "shell",
            "strace",
            "-p",
            str(zygote_pid),
            "-f",
            "-ttt",
        ]
    )


def start_application(package_name):

    # BASH CMD: `adb shell monkey -p <package_name> -c android.intent.category.LAUNCHER 1`
    subprocess.call(
        [
            "adb",
            "shell",
            "monkey",
            "-p",
            package_name,
            "-c",
            "android.intent.category.LAUNCHER",
            "1",
        ]
    )


def retrieve_application_pid(package_name):
    """
    BASH CMD:
    `adb shell pidof <package_name>`
    """
    pid = (
        subprocess.check_output(["adb", "shell", "pidof", package_name])
        .decode()
        .strip()
    )
    return int(pid)


def simulate_user_interactions(package_name, duration, output_file):
    with open(output_file, "w") as file:
        """
        BASH CMD:
       ` adb shell monkey -p <package_name> -v --throttle 200 --pct-touch 45 --pct-motion 20 --pct-trackball 10
        --pct-syskeys 5 --pct-appswitch 10 --ignore-crashes --ignore-timeouts --ignore-security-exceptions --monitor-native-crashes
        -s 1234 -v -v -v <duration>`
        """
        process = subprocess.Popen(
            [
                "adb",
                "shell",
                "monkey",
                "-p",
                package_name,
                "-v",
                "--throttle",
                "200",
                "--pct-touch",
                "45",
                "--pct-motion",
                "20",
                "--pct-trackball",
                "10",
                "--pct-syskeys",
                "5",
                "--pct-appswitch",
                "10",
                "--ignore-crashes",
                "--ignore-timeouts",
                "--ignore-security-exceptions",
                "--monitor-native-crashes",
                "-s",
                "1234",
                "-v",
                "-v",
                "-v",
                str(duration),
            ],
            stdout=subprocess.PIPE,
        )

        # Read the output and write it to the file
        while True:
            output = process.stdout.readline()
            if not output:
                break
            file.write(output.decode().strip() + "\n")


def stop_strace(output_file):
    # BASH CMD: `adb shell pkill strace`
    subprocess.call(["adb", "shell", "pkill", "strace"])

    # BAS CMD: `adb pull <output_file>`
    subprocess.call(["adb", "pull", output_file])


# Main execution
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 syscall-tracing.py <apk_path>")
        sys.exit(1)

    apk_path = sys.argv[1]

    package_name = get_package_name(apk_path)
    output_file_path_monkey, output_file_path_strace = helper.create_directories(package_name)
    

    # Step 1: Install application from input repository
    install_application(apk_path)

    # Step 2: Run strace on zygote
    run_strace_on_zygote(output_file_path_strace)

    # Step 4: Start an application
    start_application(package_name)
    # time.sleep(20)

    # Step 5: Simulate user interactions using Monkey and run for 2000 seconds
    simulate_user_interactions(package_name, 2000, output_file_path_monkey)

    # # Step 6: Stop strace, move log file to output repository
    stop_strace(output_file_path_strace)
