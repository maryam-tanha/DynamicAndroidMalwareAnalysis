from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score
from sklearn.model_selection import GridSearchCV
import pandas as pd
from xgboost import XGBClassifier
import sys


remote_path = "results.txt"

with open(remote_path, "w") as f:
    sys.stdout = f  # Redirect output to the file

    training_data = pd.read_csv('training.csv')
    test_data = pd.read_csv('test.csv')
    train = pd.DataFrame(training_data)
    test = pd.DataFrame(test_data)

    # Randomly shuffling the rows of the dataframes
    train = train.sample(frac=1, random_state=42)  # Setting a random seed for reproducibility
    test = test.sample(frac=1, random_state=42)  # Setting a random seed for reproducibility
    train.reset_index(drop=True, inplace=True)
    test.reset_index(drop=True, inplace=True)

    # Calculating the ratio of benign to malware APKs in training set
    malware_column_train = train['Malware']
    ratio_ones_to_zeroes = malware_column_train.value_counts(normalize=True)
    print("TRAINING SET: Ratio of Benign APKs to Malware APKs:")
    print(ratio_ones_to_zeroes)

    # Calculating the ratio of benign to malware APKs
    malware_column_test = test['Malware']
    ratio_ones_to_zeroes = malware_column_test.value_counts(normalize=True)
    print("TEST SET: Ratio of Benign APKs to Malware APKs:")
    print(ratio_ones_to_zeroes)

    # Set display options
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_columns', None)
    train = train.drop(['APK Name'], axis=1)
    test = test.drop(['APK Name'], axis=1)

    # Print the names of all columns
    column_names = train.columns
    column_names_list = column_names.to_list()

    for col in column_names_list:
        train[col] = train[col].astype(int)
        test[col] = test[col].astype(int)

    # Split data into features and target
    X_train = train.drop(columns=['Malware'])
    y_train = train['Malware']

    # Split data into features and target
    X_test = test.drop(columns=['Malware'])
    y_test = test['Malware']


    # Parameter Grid for Random Forest
    # param_grid_rf = {
    #     'n_estimators': [50, 100, 200, 500, 1000],
    #     'max_depth': [None, 10, 16, 20, 30, 40],
    #     'min_samples_split': [2, 5, 10, 20, 50]
    # }


    # # Define the parameter grid for XGBoost
    # param_grid_xgb = {
    #     'n_estimators': [50, 100, 200, 500],
    #     'max_depth': [3, 6, 9, 12],
    #     'learning_rate': [0.001, 0.01, 0.1, 0.3],
    #     'subsample': [0.5, 0.8, 1.0],
    #     'colsample_bytree': [0.5, 0.8, 1.0]
    # }

    param_grid_rf = {
        'n_estimators': [500],
        'max_depth': [20],
        'min_samples_split': [10]
    }
    param_grid_xgb = {
        'n_estimators': [500],
        'max_depth': [3],
        'learning_rate': [0.1],
        'subsample': [1.0],
        'colsample_bytree': [0.8]
    }

    rf_model = RandomForestClassifier()
    xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')

    grid_search_rf = GridSearchCV(rf_model, param_grid_rf, cv=10, verbose=2, n_jobs=-1)
    grid_search_xgb = GridSearchCV(xgb_model, param_grid_xgb, cv=10, verbose=2, n_jobs=-1)

    # Fit the models
    grid_search_rf.fit(X_train, y_train)
    grid_search_xgb.fit(X_train, y_train)

    # Predict and evaluate using the best model
    best_rf = grid_search_rf.best_estimator_
    best_xgb = grid_search_xgb.best_estimator_

    print("================RANDOM FOREST RESULTS===================:")
    y_pred_rf = best_rf.predict(X_test)
    print("Best Parameters: ", grid_search_rf.best_params_)
    print("Accuracy:", accuracy_score(y_test, y_pred_rf))

    # Can be removed -----------------
    print("Precision (Malware):", precision_score(y_test, y_pred_rf, pos_label=1))
    print("Recall (Malware):", recall_score(y_test, y_pred_rf, pos_label=1))
    print("F1 Score (Malware):", f1_score(y_test, y_pred_rf, pos_label=1))
    #------------------------------------

    print(classification_report(y_test, y_pred_rf, labels=[0, 1], target_names=["Benign", "Malware"]))

    # Predict and evaluate using the best model
    print("================XGB BOOST RESULTS===================:")
    y_pred_xgb = best_xgb.predict(X_test)
    print("Best Parameters: ", grid_search_xgb.best_params_)
    print("Accuracy:", accuracy_score(y_test, y_pred_xgb))

    # Can be removed -----------------
    print("Precision (Malware):", precision_score(y_test, y_pred_xgb, pos_label=1))
    print("Recall (Malware):", recall_score(y_test, y_pred_xgb, pos_label=1))
    print("F1 Score (Malware):", f1_score(y_test, y_pred_xgb, pos_label=1))
    #------------------------------------

    print(classification_report(y_test, y_pred_xgb, labels=[0, 1], target_names=["Benign", "Malware"]))

# Reset the output to the console
sys.stdout = sys.__stdout__

print("Results have been written to 'results.txt")
