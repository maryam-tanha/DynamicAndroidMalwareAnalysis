import subprocess
import time
import multiprocessing

def run_dumpsys_command(command, output_file):
    try:
        # Run the dumpsys command and capture its output
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        output, error = process.communicate()
        
        # Check if the command executed successfully
        if process.returncode == 0:
            with open(output_file, "w") as file:
                file.write(output.decode('utf-8'))
        else:
            print(f"Error running command: {command}")
            print(error.decode('utf-8'))
    except Exception as e:
        print(f"An error occurred: {e}")

def main():
    # Define a list of dumpsys commands to run
    dumpsys_commands = [
        ("adb shell dumpsys activity", "activity_dump.txt"),
        ("adb shell dumpsys window", "window_dump.txt"),
        ("adb shell dumpsys meminfo", "meminfo_dump.txt"),
        ("adb shell dumpsys package", "package_dump.txt"),
        ("adb shell dumpsys batteryinfo", "batteryinfo_dump.txt")
    ]

    # Create a list to hold the process objects
    processes = []

    # Run each dumpsys command in parallel
    for command, output_file in dumpsys_commands:
        process = multiprocessing.Process(target=run_dumpsys_command, args=(command, output_file))
        processes.append(process)
        process.start()

    # Wait for all processes to complete
    for process in processes:
        process.join()

if __name__ == "__main__":
    main()
